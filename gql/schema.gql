interface AbstractSample {
  uuid: ID!
  title: String
  description: String
  parent: Sample
}

interface SearchResult {
  total: Int
  samples: [Sample]
}

type ChemicalSearchResult implements SearchResult {
  total: Int
  samples: [Chemical]
}

type Chemical implements AbstractSample {
  uuid: ID!
  title: String
  description: String
  code: [String]
  names: [Name]
  molecule: Molecule
  physical: PhysicalProperties
  spectra: Spectra
  parent: Sample
}

type Plasmid implements AbstractSample {
  uuid: ID!
  title: String
  description: String
  sequence: Sequence
  parent: Sample
}

type Stock implements AbstractSample {
  uuid: ID!
  title: String
  description: String
  supplier: Supplier
  quantity: Quantity
  parent: Stock
}

type Quantity {
  unit: String
  amount: Float
}

type Supplier {
  name: String
  address: String
}

type Sequence {
  bases: String
  size: Float
}

union Sample = Chemical | Plasmid | Stock

type Name {
  value: String
  language: Language
  kind: NameKind
}

enum Language {
  fr
  en
}

enum NameKind {
  abbreviation
  iupac
  common
}

type Molecule {
  molfile: String
  molecularFormula: String
  molecularWeight: Float
  monoisotopicMass: Float
  ocl: OCL
  inchi: Inchi
}

type OCL {
  value: ID
  coordinates: ID
  # todo add logp, hdonor...
}

type Inchi {
  standard: ID
  key: ID
}

type Spectra {
  nmr: [NmrSpectrum]
  #    mass: [MassSpectrum]
  #    ir: [InfraredSpectrum]
}

type File {
  filename: String
  url: String
  size: Float
}
